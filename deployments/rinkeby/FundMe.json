{
  "address": "0x6c5bcf470D3843987e311F70EA4aEFa089BEcFA3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x448cedace2ec2dc2bc8c7c0cc67630a89d5b40a55d9f088858ffefcbf53b33cb",
  "receipt": {
    "to": null,
    "from": "0x80744e7DAaDb9E175B76f1651f564244b2F806D7",
    "contractAddress": "0x6c5bcf470D3843987e311F70EA4aEFa089BEcFA3",
    "transactionIndex": 6,
    "gasUsed": "899710",
    "logsBloom": "0x
    "blockHash": "0x60d9e8f41b590b2eaaf37801d777f024d1a603b93dfc6c87a589e3f4f67b7e72",
    "transactionHash": "0x448cedace2ec2dc2bc8c7c0cc67630a89d5b40a55d9f088858ffefcbf53b33cb",
    "logs": [],
    "blockNumber": 11040475,
    "cumulativeGasUsed": "1860127",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "2fc2995cfad5562e1815ccd5f0fe971e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror NotOwner();\\r\\n\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    mapping(address => uint256) public addressToAmountFunded;\\r\\n    address[] public funders;\\r\\n\\r\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\r\\n    address public /* immutable */ i_owner;\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\r\\n\\r\\n    AggregatorV3Interface public priceFeed;\\r\\n    \\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        addressToAmountFunded[msg.sender] += msg.value;\\r\\n        funders.push(msg.sender);\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender != i_owner) revert NotOwner();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function withdraw() payable onlyOwner public {\\r\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\r\\n            address funder = funders[funderIndex];\\r\\n            addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        funders = new address[](0);\\r\\n        // // transfer\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        // // send\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"Send failed\\\");\\r\\n        // call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n    }\\r\\n    // Explainer from: https://solidity-by-example.org/fallback/\\r\\n    // Ether is sent to contract\\r\\n    //      is msg.data empty?\\r\\n    //          /   \\\\ \\r\\n    //         yes  no\\r\\n    //         /     \\\\\\r\\n    //    receive()?  fallback() \\r\\n    //     /   \\\\ \\r\\n    //   yes   no\\r\\n    //  /        \\\\\\r\\n    //receive()  fallback()\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n// Concepts we didn't cover yet (will cover in later sections)\\r\\n// 1. Enum\\r\\n// 2. Events\\r\\n// 3. Try / Catch\\r\\n// 4. Function Selector\\r\\n// 5. abi.encode / decode\\r\\n// 6. Hash with keccak256\\r\\n// 7. Yul / Assembly\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0x46cfc2ddfc163548014f5238e5fded6685685ce3bfd81bc26c3c9616e7d29eef\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeedAddress)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Rinkeby ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            priceFeedAddress\\r\\n        );\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd45d9e3eab53e9b428b52d4ad6e20f84aae65a82e89ef76614c2696a7c35f01d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162000fd838038062000fd88339818101604052810190610034919061011f565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ec826100c1565b9050919050565b6100fc816100e1565b811461010757600080fd5b50565b600081519050610119816100f3565b92915050565b600060208284031215610135576101346100bc565b5b60006101438482850161010a565b91505092915050565b610e7c806200015c6000396000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a146100ff578063b60d42881461012a578063dba6335f14610134578063dc0d3dff1461015f57610083565b80633ccfd60b1461008d5780633e47d6f3146100975780636b69a592146100d457610083565b366100835761008161019c565b005b61008b61019c565b005b6100956102d6565b005b3480156100a357600080fd5b506100be60048036038101906100b991906107b4565b610518565b6040516100cb91906107fa565b60405180910390f35b3480156100e057600080fd5b506100e9610530565b6040516100f691906107fa565b60405180910390f35b34801561010b57600080fd5b5061011461053d565b6040516101219190610874565b60405180910390f35b61013261019c565b005b34801561014057600080fd5b50610149610563565b604051610156919061089e565b60405180910390f35b34801561016b57600080fd5b50610186600480360381019061018191906108e5565b610589565b604051610193919061089e565b60405180910390f35b6802b5e3af16b18800006101db600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c890919063ffffffff16565b101561021c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102139061096f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461026a91906109be565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035d576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104085760006001828154811061038357610382610a14565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040090610a43565b915050610360565b50600067ffffffffffffffff81111561042457610423610a8c565b5b6040519080825280602002602001820160405280156104525781602001602082028036833780820191505090505b50600190805190602001906104689291906106aa565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048f90610aec565b60006040518083038185875af1925050503d80600081146104cc576040519150601f19603f3d011682016040523d82523d6000602084013e6104d1565b606091505b5050905080610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050c90610b4d565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061059957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d483610604565b90506000670de0b6b3a764000085836105ed9190610b6d565b6105f79190610bf6565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065257600080fd5b505afa158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a9190610cb4565b5050509150506402540be400816106a19190610d2f565b92505050919050565b828054828255906000526020600020908101928215610723579160200282015b828111156107225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ca565b5b5090506107309190610734565b5090565b5b8082111561074d576000816000905550600101610735565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078182610756565b9050919050565b61079181610776565b811461079c57600080fd5b50565b6000813590506107ae81610788565b92915050565b6000602082840312156107ca576107c9610751565b5b60006107d88482850161079f565b91505092915050565b6000819050919050565b6107f4816107e1565b82525050565b600060208201905061080f60008301846107eb565b92915050565b6000819050919050565b600061083a61083561083084610756565b610815565b610756565b9050919050565b600061084c8261081f565b9050919050565b600061085e82610841565b9050919050565b61086e81610853565b82525050565b60006020820190506108896000830184610865565b92915050565b61089881610776565b82525050565b60006020820190506108b3600083018461088f565b92915050565b6108c2816107e1565b81146108cd57600080fd5b50565b6000813590506108df816108b9565b92915050565b6000602082840312156108fb576108fa610751565b5b6000610909848285016108d0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610959601b83610912565b915061096482610923565b602082019050919050565b600060208201905081810360008301526109888161094c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c9826107e1565b91506109d4836107e1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0957610a0861098f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a4e826107e1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8157610a8061098f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ad6600083610abb565b9150610ae182610ac6565b600082019050919050565b6000610af782610ac9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b37600b83610912565b9150610b4282610b01565b602082019050919050565b60006020820190508181036000830152610b6681610b2a565b9050919050565b6000610b78826107e1565b9150610b83836107e1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bbc57610bbb61098f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c01826107e1565b9150610c0c836107e1565b925082610c1c57610c1b610bc7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4681610c27565b8114610c5157600080fd5b50565b600081519050610c6381610c3d565b92915050565b6000819050919050565b610c7c81610c69565b8114610c8757600080fd5b50565b600081519050610c9981610c73565b92915050565b600081519050610cae816108b9565b92915050565b600080600080600060a08688031215610cd057610ccf610751565b5b6000610cde88828901610c54565b9550506020610cef88828901610c8a565b9450506040610d0088828901610c9f565b9350506060610d1188828901610c9f565b9250506080610d2288828901610c54565b9150509295509295909350565b6000610d3a82610c69565b9150610d4583610c69565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8457610d8361098f565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc157610dc061098f565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610dfe57610dfd61098f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e3b57610e3a61098f565b5b82820290509291505056fea26469706673582212209e9963d59324dfc8ab711eedebf00f660d57384a0e7d2b83b6a40dccc0b3e36564736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a146100ff578063b60d42881461012a578063dba6335f14610134578063dc0d3dff1461015f57610083565b80633ccfd60b1461008d5780633e47d6f3146100975780636b69a592146100d457610083565b366100835761008161019c565b005b61008b61019c565b005b6100956102d6565b005b3480156100a357600080fd5b506100be60048036038101906100b991906107b4565b610518565b6040516100cb91906107fa565b60405180910390f35b3480156100e057600080fd5b506100e9610530565b6040516100f691906107fa565b60405180910390f35b34801561010b57600080fd5b5061011461053d565b6040516101219190610874565b60405180910390f35b61013261019c565b005b34801561014057600080fd5b50610149610563565b604051610156919061089e565b60405180910390f35b34801561016b57600080fd5b50610186600480360381019061018191906108e5565b610589565b604051610193919061089e565b60405180910390f35b6802b5e3af16b18800006101db600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c890919063ffffffff16565b101561021c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102139061096f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461026a91906109be565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035d576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104085760006001828154811061038357610382610a14565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040090610a43565b915050610360565b50600067ffffffffffffffff81111561042457610423610a8c565b5b6040519080825280602002602001820160405280156104525781602001602082028036833780820191505090505b50600190805190602001906104689291906106aa565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161048f90610aec565b60006040518083038185875af1925050503d80600081146104cc576040519150601f19603f3d011682016040523d82523d6000602084013e6104d1565b606091505b5050905080610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050c90610b4d565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061059957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d483610604565b90506000670de0b6b3a764000085836105ed9190610b6d565b6105f79190610bf6565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065257600080fd5b505afa158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a9190610cb4565b5050509150506402540be400816106a19190610d2f565b92505050919050565b828054828255906000526020600020908101928215610723579160200282015b828111156107225782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106ca565b5b5090506107309190610734565b5090565b5b8082111561074d576000816000905550600101610735565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078182610756565b9050919050565b61079181610776565b811461079c57600080fd5b50565b6000813590506107ae81610788565b92915050565b6000602082840312156107ca576107c9610751565b5b60006107d88482850161079f565b91505092915050565b6000819050919050565b6107f4816107e1565b82525050565b600060208201905061080f60008301846107eb565b92915050565b6000819050919050565b600061083a61083561083084610756565b610815565b610756565b9050919050565b600061084c8261081f565b9050919050565b600061085e82610841565b9050919050565b61086e81610853565b82525050565b60006020820190506108896000830184610865565b92915050565b61089881610776565b82525050565b60006020820190506108b3600083018461088f565b92915050565b6108c2816107e1565b81146108cd57600080fd5b50565b6000813590506108df816108b9565b92915050565b6000602082840312156108fb576108fa610751565b5b6000610909848285016108d0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610959601b83610912565b915061096482610923565b602082019050919050565b600060208201905081810360008301526109888161094c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c9826107e1565b91506109d4836107e1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a0957610a0861098f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a4e826107e1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a8157610a8061098f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ad6600083610abb565b9150610ae182610ac6565b600082019050919050565b6000610af782610ac9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b37600b83610912565b9150610b4282610b01565b602082019050919050565b60006020820190508181036000830152610b6681610b2a565b9050919050565b6000610b78826107e1565b9150610b83836107e1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bbc57610bbb61098f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c01826107e1565b9150610c0c836107e1565b925082610c1c57610c1b610bc7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c4681610c27565b8114610c5157600080fd5b50565b600081519050610c6381610c3d565b92915050565b6000819050919050565b610c7c81610c69565b8114610c8757600080fd5b50565b600081519050610c9981610c73565b92915050565b600081519050610cae816108b9565b92915050565b600080600080600060a08688031215610cd057610ccf610751565b5b6000610cde88828901610c54565b9550506020610cef88828901610c8a565b9450506040610d0088828901610c9f565b9350506060610d1188828901610c9f565b9250506080610d2288828901610c54565b9150509295509295909350565b6000610d3a82610c69565b9150610d4583610c69565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d8457610d8361098f565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dc157610dc061098f565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610dfe57610dfd61098f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e3b57610e3a61098f565b5b82820290509291505056fea26469706673582212209e9963d59324dfc8ab711eedebf00f660d57384a0e7d2b83b6a40dccc0b3e36564736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}