{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x05683aa4bd5ce971a02a1e338efaa817b137b6361e2334ac9c08dea35214b272",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "894562",
    "logsBloom": "0x
    "blockHash": "0xd111c4639300aeba3398cce0371faa9ca18f7dbaa6df33b5d78d0c5241f10505",
    "transactionHash": "0x05683aa4bd5ce971a02a1e338efaa817b137b6361e2334ac9c08dea35214b272",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "894562",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "563bceb3569d972fd3c5c6eb36786b8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    mapping(address => uint256) public addressToAmountFunded;\\r\\n    address[] public funders;\\r\\n\\r\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\r\\n    address public /* immutable */ i_owner;\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\r\\n\\r\\n    AggregatorV3Interface public priceFeed; \\r\\n\\r\\n        \\r\\n    modifier onlyOwner {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        addressToAmountFunded[msg.sender] += msg.value;\\r\\n        funders.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw() payable onlyOwner public {\\r\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\r\\n            address funder = funders[funderIndex];\\r\\n            addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        funders = new address[](0);\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n    }\\r\\n\\r\\n    \\r\\n    // Explainer from: https://solidity-by-example.org/fallback/\\r\\n    // Ether is sent to contract\\r\\n    //      is msg.data empty?\\r\\n    //          /   \\\\ \\r\\n    //         yes  no\\r\\n    //         /     \\\\\\r\\n    //    receive()?  fallback() \\r\\n    //     /   \\\\ \\r\\n    //   yes   no\\r\\n    //  /        \\\\\\r\\n    //receive()  fallback()\\r\\n}\\r\\n\\r\\n// Concepts we didn't cover yet (will cover in later sections)\\r\\n// 1. Enum\\r\\n// 2. Events\\r\\n// 3. Try / Catch\\r\\n// 4. Function Selector\\r\\n// 5. abi.encode / decode\\r\\n// 6. Hash with keccak256\\r\\n// 7. Yul / Assembly\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0xb417acb1bb43e5b3d46636b91488eb07d70eb43f3e06e6727e732207921e7ccd\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeedAddress)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Rinkeby ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n            priceFeedAddress\\r\\n        );\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        // ETH/USD rate in 18 digit\\r\\n        return uint256(answer * 10000000000);\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd45d9e3eab53e9b428b52d4ad6e20f84aae65a82e89ef76614c2696a7c35f01d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610fbd380380610fbd8339818101604052810190610032919061011d565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b610e64806101596000396000f3fe6080604052600436106100705760003560e01c8063741bef1a1161004e578063741bef1a146100e7578063b60d428814610112578063dba6335f1461011c578063dc0d3dff1461014757610070565b80633ccfd60b146100755780633e47d6f31461007f5780636b69a592146100bc575b600080fd5b61007d610184565b005b34801561008b57600080fd5b506100a660048036038101906100a1919061079c565b6103c6565b6040516100b391906107e2565b60405180910390f35b3480156100c857600080fd5b506100d16103de565b6040516100de91906107e2565b60405180910390f35b3480156100f357600080fd5b506100fc6103eb565b604051610109919061085c565b60405180910390f35b61011a610411565b005b34801561012857600080fd5b5061013161054b565b60405161013e9190610886565b60405180910390f35b34801561015357600080fd5b5061016e600480360381019061016991906108cd565b610571565b60405161017b9190610886565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102b657600060018281548110610231576102306108fa565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102ae90610958565b91505061020e565b50600067ffffffffffffffff8111156102d2576102d16109a1565b5b6040519080825280602002602001820160405280156103005781602001602082028036833780820191505090505b5060019080519060200190610316929190610692565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161033d90610a01565b60006040518083038185875af1925050503d806000811461037a576040519150601f19603f3d011682016040523d82523d6000602084013e61037f565b606091505b50509050806103c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ba90610a73565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b1880000610450600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b090919063ffffffff16565b1015610491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048890610adf565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104df9190610aff565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061058157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105bc836105ec565b90506000670de0b6b3a764000085836105d59190610b55565b6105df9190610bde565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190610c9c565b5050509150506402540be400816106899190610d17565b92505050919050565b82805482825590600052602060002090810192821561070b579160200282015b8281111561070a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b2565b5b509050610718919061071c565b5090565b5b8082111561073557600081600090555060010161071d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107698261073e565b9050919050565b6107798161075e565b811461078457600080fd5b50565b60008135905061079681610770565b92915050565b6000602082840312156107b2576107b1610739565b5b60006107c084828501610787565b91505092915050565b6000819050919050565b6107dc816107c9565b82525050565b60006020820190506107f760008301846107d3565b92915050565b6000819050919050565b600061082261081d6108188461073e565b6107fd565b61073e565b9050919050565b600061083482610807565b9050919050565b600061084682610829565b9050919050565b6108568161083b565b82525050565b6000602082019050610871600083018461084d565b92915050565b6108808161075e565b82525050565b600060208201905061089b6000830184610877565b92915050565b6108aa816107c9565b81146108b557600080fd5b50565b6000813590506108c7816108a1565b92915050565b6000602082840312156108e3576108e2610739565b5b60006108f1848285016108b8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610963826107c9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561099657610995610929565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006109eb6000836109d0565b91506109f6826109db565b600082019050919050565b6000610a0c826109de565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610a5d600b83610a16565b9150610a6882610a27565b602082019050919050565b60006020820190508181036000830152610a8c81610a50565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ac9601b83610a16565b9150610ad482610a93565b602082019050919050565b60006020820190508181036000830152610af881610abc565b9050919050565b6000610b0a826107c9565b9150610b15836107c9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b4a57610b49610929565b5b828201905092915050565b6000610b60826107c9565b9150610b6b836107c9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ba457610ba3610929565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610be9826107c9565b9150610bf4836107c9565b925082610c0457610c03610baf565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c2e81610c0f565b8114610c3957600080fd5b50565b600081519050610c4b81610c25565b92915050565b6000819050919050565b610c6481610c51565b8114610c6f57600080fd5b50565b600081519050610c8181610c5b565b92915050565b600081519050610c96816108a1565b92915050565b600080600080600060a08688031215610cb857610cb7610739565b5b6000610cc688828901610c3c565b9550506020610cd788828901610c72565b9450506040610ce888828901610c87565b9350506060610cf988828901610c87565b9250506080610d0a88828901610c3c565b9150509295509295909350565b6000610d2282610c51565b9150610d2d83610c51565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d6c57610d6b610929565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610da957610da8610929565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610de657610de5610929565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e2357610e22610929565b5b82820290509291505056fea2646970667358221220f3470758849b51bc0d4dcd1e90e92f2e53e8bbf81fa02e054524ebef6c277c2e64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c8063741bef1a1161004e578063741bef1a146100e7578063b60d428814610112578063dba6335f1461011c578063dc0d3dff1461014757610070565b80633ccfd60b146100755780633e47d6f31461007f5780636b69a592146100bc575b600080fd5b61007d610184565b005b34801561008b57600080fd5b506100a660048036038101906100a1919061079c565b6103c6565b6040516100b391906107e2565b60405180910390f35b3480156100c857600080fd5b506100d16103de565b6040516100de91906107e2565b60405180910390f35b3480156100f357600080fd5b506100fc6103eb565b604051610109919061085c565b60405180910390f35b61011a610411565b005b34801561012857600080fd5b5061013161054b565b60405161013e9190610886565b60405180910390f35b34801561015357600080fd5b5061016e600480360381019061016991906108cd565b610571565b60405161017b9190610886565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156102b657600060018281548110610231576102306108fa565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102ae90610958565b91505061020e565b50600067ffffffffffffffff8111156102d2576102d16109a1565b5b6040519080825280602002602001820160405280156103005781602001602082028036833780820191505090505b5060019080519060200190610316929190610692565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161033d90610a01565b60006040518083038185875af1925050503d806000811461037a576040519150601f19603f3d011682016040523d82523d6000602084013e61037f565b606091505b50509050806103c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ba90610a73565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b1880000610450600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105b090919063ffffffff16565b1015610491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048890610adf565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104df9190610aff565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001818154811061058157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105bc836105ec565b90506000670de0b6b3a764000085836105d59190610b55565b6105df9190610bde565b9050809250505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561063a57600080fd5b505afa15801561064e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106729190610c9c565b5050509150506402540be400816106899190610d17565b92505050919050565b82805482825590600052602060002090810192821561070b579160200282015b8281111561070a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106b2565b5b509050610718919061071c565b5090565b5b8082111561073557600081600090555060010161071d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107698261073e565b9050919050565b6107798161075e565b811461078457600080fd5b50565b60008135905061079681610770565b92915050565b6000602082840312156107b2576107b1610739565b5b60006107c084828501610787565b91505092915050565b6000819050919050565b6107dc816107c9565b82525050565b60006020820190506107f760008301846107d3565b92915050565b6000819050919050565b600061082261081d6108188461073e565b6107fd565b61073e565b9050919050565b600061083482610807565b9050919050565b600061084682610829565b9050919050565b6108568161083b565b82525050565b6000602082019050610871600083018461084d565b92915050565b6108808161075e565b82525050565b600060208201905061089b6000830184610877565b92915050565b6108aa816107c9565b81146108b557600080fd5b50565b6000813590506108c7816108a1565b92915050565b6000602082840312156108e3576108e2610739565b5b60006108f1848285016108b8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610963826107c9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561099657610995610929565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b60006109eb6000836109d0565b91506109f6826109db565b600082019050919050565b6000610a0c826109de565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610a5d600b83610a16565b9150610a6882610a27565b602082019050919050565b60006020820190508181036000830152610a8c81610a50565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610ac9601b83610a16565b9150610ad482610a93565b602082019050919050565b60006020820190508181036000830152610af881610abc565b9050919050565b6000610b0a826107c9565b9150610b15836107c9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b4a57610b49610929565b5b828201905092915050565b6000610b60826107c9565b9150610b6b836107c9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ba457610ba3610929565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610be9826107c9565b9150610bf4836107c9565b925082610c0457610c03610baf565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c2e81610c0f565b8114610c3957600080fd5b50565b600081519050610c4b81610c25565b92915050565b6000819050919050565b610c6481610c51565b8114610c6f57600080fd5b50565b600081519050610c8181610c5b565b92915050565b600081519050610c96816108a1565b92915050565b600080600080600060a08688031215610cb857610cb7610739565b5b6000610cc688828901610c3c565b9550506020610cd788828901610c72565b9450506040610ce888828901610c87565b9350506060610cf988828901610c87565b9250506080610d0a88828901610c3c565b9150509295509295909350565b6000610d2282610c51565b9150610d2d83610c51565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d6c57610d6b610929565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610da957610da8610929565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610de657610de5610929565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e2357610e22610929565b5b82820290509291505056fea2646970667358221220f3470758849b51bc0d4dcd1e90e92f2e53e8bbf81fa02e054524ebef6c277c2e64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}